#!/bin/bash
export MSYS_NO_PATHCONV=1
SCRIPT_HOME="$( cd "$( dirname "$0" )" && pwd )"

# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------
usage () {
  cat <<-EOF

  Allows you to manage certain aspects of the environment.

  Usage:
    $0 [options] [commands]

  Example:
    $0 -e dev resetEventDatabase
    - This will drop and recreate the event database in the DEV environment.

  Options:
  ========
    -s <ResourceSuffix>; The suffix used to identify the resource instances.
      - Defaults to '${resourceSuffix}'

  Commands:
  ========
    resetEventDatabase
      - Drop and recreate the event database.

    resetEventProcLogDatabase
      - Drop and recreate the event processor log database.

    deleteDatabase
      - Deletes all databases off a pod and recycles the pod leaving it in a clean state.

    reset
      - Reset the environment.  Specifically the event and event processor log databases.
      - The wallet is retained.

    requeueFailedEvents
      - Requeue any events (event_by_corp_filing records) that have failed processing.

    requeueFailedCorps
      - Requeue any corporations (corp_history_log records) that have failed processing.

    requeueFailedCreds
      - Requeue any credentials (credential_log records) that have failed posting.

    requeueProcessedCreds
      - Use with caution.  Requeue any credentials that have already been posted.

    getPipelineStatus
      - Get the pipeline status for the given environment.
        Runs the './run-step.sh bcreg/display_pipeline_status.py' pipeline script
        on an instance of a event-processor pod.

    getRunningProcesses
      - Get a list of running processes running on a pod.
        Runs 'ps -v' on the pod.

    getDbDiskUsage <podName/>
      - Get the disk usage information for a given database pod.
        For example;
          $0 -e dev getDbDiskUsage wallet-indy-cat

    getCredentialPostRate [<periodInSeconds/>]
      - Calculates the rate at which credentials are being posted.
      - Expects the './run-step.sh bcreg/bc_reg_pipeline_post_credentials.py' pipeline to be running.
      - Calculations are based on the number of credentials that have been sucessfully posted over the
        specified period of time.

      periodInSeconds - Optional
        - Calculates the rate at which credentials were posted over the last number of seconds.
        - If left blank the period is calculated based on the how long the 
          './run-step.sh bcreg/bc_reg_pipeline_post_credentials.py' has been running.

      Examples:
        $0 -e dev getCredentialPostRate
          - Get the average rate since the pipeline was started.

        $0 -e dev getCredentialPostRate 300
          - Get the average rate over the last 5 minutes.

    scaleUp
      - Scale up one or more pods.
        For example;
          $0 -e dev scaleUp mara

    scaleDown
      - Scale down one or more pods.
        For example;
          $0 -e dev scaleDown mara

    recycle
      - Recycle one or more pods.
        For example;
          $0 -e dev recycle mara

EOF
}

# -----------------------------------------------------------------------------------------------------------------
# Defaults:
# -----------------------------------------------------------------------------------------------------------------
resourceSuffix="${resourceSuffix:--indy-cat}"
# -----------------------------------------------------------------------------------------------------------------

# =================================================================================================================
# Process the local command line arguments and pass everything else along.
# - The 'getopts' options string must start with ':' for this to work.
# -----------------------------------------------------------------------------------------------------------------
while [ ${OPTIND} -le $# ]; do
  if getopts :s: FLAG; then
    case ${FLAG} in
      # List of local options:
      s ) resourceSuffix=$OPTARG ;;

      # Pass unrecognized options ...
      \?) pass+=" -${OPTARG}" ;;
    esac
  else
    # Pass unrecognized arguments ...
    pass+=" ${!OPTIND}"
    let OPTIND++
  fi
done

# Pass the unrecognized arguments along for further processing ...
shift $((OPTIND-1))
set -- "$@" $(echo -e "${pass}" | sed -e 's/^[[:space:]]*//')
# =================================================================================================================

# -----------------------------------------------------------------------------------------------------------------
# Define hook scripts:
# - These must be defined before the main settings script 'settings.sh' is loaded.
# -----------------------------------------------------------------------------------------------------------------
onRequiredOptionsExist() {
  (
    if [ -z "${DEPLOYMENT_ENV_NAME}" ]; then
      _red='\033[0;31m'
      _nc='\033[0m' # No Color
          echo -e "\n${_red}You MUST specify an environment name using the '-e' flag.${_nc}"
          echo -e "${_red}Assuming a default would have unwanted consequences.${_nc}\n"
          return 1
        else
          return 0
    fi
  )
}

onUsesCommandLineArguments() {
  (
    # This script is expecting command line arguments to be passed ...
    return 0
  )
}

# -----------------------------------------------------------------------------------------------------------------
# Initialization:
# -----------------------------------------------------------------------------------------------------------------
# Load the project settings and functions ...
_includeFile="ocFunctions.inc"
_settingsFile="settings.sh"
if [ ! -z $(type -p ${_includeFile}) ]; then
  _includeFilePath=$(type -p ${_includeFile})
  export OCTOOLSBIN=$(dirname ${_includeFilePath})

  if [ -f ${OCTOOLSBIN}/${_settingsFile} ]; then
    . ${OCTOOLSBIN}/${_settingsFile}
  fi

  if [ -f ${OCTOOLSBIN}/${_includeFile} ]; then
    . ${OCTOOLSBIN}/${_includeFile}
  fi
else
  _red='\033[0;31m'
  _yellow='\033[1;33m'
  _nc='\033[0m' # No Color
  echo -e \\n"${_red}${_includeFile} could not be found on the path.${_nc}"
  echo -e "${_yellow}Please ensure the openshift-developer-tools are installed on and registered on your path.${_nc}"
  echo -e "${_yellow}https://github.com/BCDevOps/openshift-developer-tools${_nc}"
fi

# -----------------------------------------------------------------------------------------------------------------
# Functions:
# -----------------------------------------------------------------------------------------------------------------
function resetDatabase() {
  _podName=${1}
  if [ -z "${_podName}" ]; then
    echoError "\nresetDatabase; You MUST specify a pod name.\n"
    exit 1
  fi

  printAndAskToContinue "If you contiune the ${_podName}${resourceSuffix} database will be dropped and recreated.  All data will be lost."
  dropAndRecreatePostgreSqlDatabase ${_podName}${resourceSuffix}
  echoWarning "\nThe ${_podName}${resourceSuffix} database has been dropped and recreated."
}

function resetEventDatabase() {
    _dbPodName=${1}
    _eventProcessorPodName=${2}
    if [ -z "${_dbPodName}" ] || [ -z "${_eventProcessorPodName}" ]; then
      echoError "\nresetEventDatabase; You MUST specify the name of the event-db and event-processor pods.\n"
      exit 1
    fi

    resetDatabase "${_dbPodName}"
    runInContainer -v "${_eventProcessorPodName}${resourceSuffix}" 'cd scripts && ./run-step.sh bcreg/bc_reg_migrate.py'
}

function resetEventProcLogDatabase() {
    _dbPodName=${1}
    _eventProcessorPodName=${2}
    if [ -z "${_dbPodName}" ] || [ -z "${_eventProcessorPodName}" ]; then
      echoError "\nresetEventProcLogDatabase; You MUST specify the name of the event-processor-log-db and event-processor pods.\n"
      exit 1
    fi

    printAndAskToContinue "If you contiune the ${_dbPodName}${resourceSuffix} database will be dropped and recreated.  All data will be lost."
    dropAndRecreateDatabaseWithMigrations "${_eventProcessorPodName}${resourceSuffix}" "${_dbPodName}${resourceSuffix}"
    echoWarning "\nThe ${_dbPodName}${resourceSuffix} database has been dropped and recreated."
}

function deleteDatabase() {
  _podName=${1}
  if [ -z "${_podName}" ]; then
    echoError "\deleteDatabase; You MUST specify a pod name.\n"
    exit 1
  fi

  printAndAskToContinue "If you contiune all of the databases on ${_podName}${resourceSuffix} will be deleted.  All data will be lost."
  deleteAndRecreateDatabase ${_podName}${resourceSuffix}
  echoWarning "\nThe databases on ${_podName}${resourceSuffix} have been deleted."
}

function reset() {
  _dbPodName=${1}
  _eventProcessorLogDbPodName=${2}
  _eventProcessorPodName=${3}
  if [ -z "${_dbPodName}" ] || [ -z "${_eventProcessorLogDbPodName}" ] || [ -z "${_eventProcessorPodName}" ]; then
      echoError "\nreset; You MUST specify the name of the event-db, event-processor-log-db, and event-processor pods.\n"
    exit 1
  fi

  printAndAskToContinue "If you contiune the ${_dbPodName}${resourceSuffix}, and ${_eventProcessorLogDbPodName}${resourceSuffix} databases will be dropped and recreated.  All data will be lost."
  resetEventDatabase ${_dbPodName} ${_eventProcessorPodName}
  resetEventProcLogDatabase ${_eventProcessorLogDbPodName} ${_eventProcessorPodName}
  echoWarning "\nThe project's database and indy wallets have been reset."
}

function requeueProcessedCreds() {
  _podName=${1}
  if [ -z "${_podName}" ]; then
    echoError "\nrequeueProcessedCreds; You MUST specify a pod name.\n"
    exit 1
  fi

  echo
  runInContainer -v \
    ${_podName}${resourceSuffix} \
    'psql -d ${POSTGRESQL_DATABASE} -ac "update credential_log set process_success = null, process_date = null, process_msg = null where process_success = '"'"'Y'"'"';"'
}

function requeueFailedEvents() {
  _podName=${1}
  if [ -z "${_podName}" ]; then
    echoError "\nrequeueFailedEvents; You MUST specify a pod name.\n"
    exit 1
  fi

  echo
  runInContainer -v \
    ${_podName}${resourceSuffix} \
    'psql -d ${POSTGRESQL_DATABASE} -ac "update event_by_corp_filing set process_success = null, process_date = null, process_msg = null where process_success = '"'"'N'"'"';"'
}

function requeueFailedCorps() {
  _podName=${1}
  if [ -z "${_podName}" ]; then
    echoError "\nrequeueFailedCorps; You MUST specify a pod name.\n"
    exit 1
  fi

  # Get affected corp_nums
  corp_nums=$(runInContainer \
    ${_podName}${resourceSuffix} \
    'psql -d ${POSTGRESQL_DATABASE} -t -c "select corp_num from corp_history_log where process_success = '"'"'N'"'"';"')
  corp_nums=$(echo "${corp_nums}" | sed -e "s~[[:space:]]*\(.*\)~'\1'~" | awk -vORS=, '{ print $0 }' | sed 's~,$~\n~')

  # Remove affected credential_log records
  runInContainer -v \
    ${_podName}${resourceSuffix} \
    "psql -d "'${POSTGRESQL_DATABASE}'" -ac \"delete from credential_log where corp_num in (${corp_nums});\""

  # Remove affected corp_history_log records
  runInContainer -v \
    ${_podName}${resourceSuffix} \
    "psql -d "'${POSTGRESQL_DATABASE}'" -ac \"delete from corp_history_log where corp_num in (${corp_nums});\""

  # Requeue affected event_by_corp_filing records
  runInContainer -v \
    ${_podName}${resourceSuffix} \
    "psql -d "'${POSTGRESQL_DATABASE}'" -ac \"update event_by_corp_filing set process_success = null, process_date = null, process_msg = null where corp_num in (${corp_nums});\""
}

function requeueFailedCreds() {
  _podName=${1}
  if [ -z "${_podName}" ]; then
    echoError "\nrequeueFailedCreds; You MUST specify a pod name.\n"
    exit 1
  fi

  echo
  runInContainer -v \
    ${_podName}${resourceSuffix} \
    'psql -d ${POSTGRESQL_DATABASE} -ac "update credential_log set process_success = null, process_date = null, process_msg = null where process_success = '"'"'N'"'"';"'
}

function getPipelineStatus() {
  _podName=${1}
  if [ -z "${_podName}" ]; then
    echoError "\ngetPipelineStatus; You MUST specify a pod name.\n"
    exit 1
  fi

  echo
  runInContainer \
    ${_podName}${resourceSuffix} \
    'cd scripts && ./run-step.sh bcreg/display_pipeline_status.py'
}

function getRunningProcesses() {
  _podName=${1}
  if [ -z "${_podName}" ]; then
    echoError "\ngetRunningProcesses; You MUST specify a pod name.\n"
    exit 1
  fi

  echo
  runInContainer \
    ${_podName}${resourceSuffix} \
    'ps -v'
}

function getCredentialPostRate() {
  _periodInSeconds=${1}
  _dbPodName=${2}
  _eventProcessorPodName=${3}
  if [ -z "${_dbPodName}" ] || [ -z "${_eventProcessorPodName}" ]; then
    echoError "\getCredentialPostRate; You MUST specify the name of the event-db and event-processor pods.\n"
    exit 1
  fi

  if [ -z ${_periodInSeconds} ]; then
    runningForSeconds=$(runInContainer "${_eventProcessorPodName}${resourceSuffix}" \
      "ps a | grep '/bin/sh ./run-step.sh bcreg/bc_reg_pipeline_post_credentials.py' | grep -v grep | awk '{print \$1}' | xargs ps -o etimes= -p") 
  else
    runningForSeconds=${_periodInSeconds}
  fi

  startTime=$(TZ='UTC' date -d "now - ${runningForSeconds} seconds" +"%Y-%m-%d %H:%M:%S")
  credentialsPosted=$(runInContainer "${_dbPodName}${resourceSuffix}" \
    "psql -d bc_reg_db -t -c \"select count(*) from credential_log where process_success is not null AND process_success = 'Y' AND process_date >= '${startTime}';\"")

  if [ ! -z ${runningForSeconds} ]; then
    # Do floating point math ...
    postsPerSecond=$(awk "BEGIN {print (${credentialsPosted}/${runningForSeconds})}")
    postsPerMinute=$(awk "BEGIN {print (${postsPerSecond}*60)}")
    elapsedTime="$(($runningForSeconds/3600))h:$(($runningForSeconds%3600/60))m:$(($runningForSeconds%60))s"
  else
    echo "'/bin/sh ./run-step.sh bcreg/bc_reg_pipeline_post_credentials.py' is not currently running on ${_eventProcessorPodName}."
  fi

  # echo
  # echo "runningForSeconds: ${runningForSeconds}"
  # echo "elapsedTime: ${elapsedTime}"
  # echo "now: $(date -d "now" +"%Y-%m-%d %H:%M:%S")"
  # echo "startTime: ${startTime}"
  # echo "credentialsPosted: ${credentialsPosted}"
  # echo
  # echo "postsPerSecond: ${postsPerSecond}"
  # echo "postsPerMinute: ${postsPerMinute}"

  echo -e \\n"Credentials are being posted at an average rate of:"
  printf "  - %.0f per second, or\n" "${postsPerSecond}"
  printf "  - %.0f per minute\n" "${postsPerMinute}"
  echo "  - Over the period of ${elapsedTime}"
}
# =================================================================================================================

pushd ${SCRIPT_HOME} >/dev/null
_cmd=$(toLower ${1})
shift

case "${_cmd}" in
  reseteventdatabase)
    dbPodName=${1:-event-db}
    eventProcessorPodName=${2:-event-processor}
    resetEventDatabase "${dbPodName}" "${eventProcessorPodName}"
    ;;
  reseteventproclogdatabase)
    dbPodName=${1:-event-processor-log-db}
    eventProcessorPodName=${2:-event-processor}
    resetEventProcLogDatabase "${dbPodName}" "${eventProcessorPodName}"
    ;;
  deletedatabase)
    dbPodName=${1}
    deleteDatabase "${dbPodName}"
    ;;
  reset)
    dbPodName=${1:-event-db}
    eventProcessorLogDbPodName=${1:-event-processor-log-db}
    eventProcessorPodName=${2:-event-processor}
    reset "${dbPodName}" "${eventProcessorLogDbPodName}" "${eventProcessorPodName}"
    ;;
  requeuefailedcreds)
    dbPodName=${1:-event-db}
    requeueFailedCreds "${dbPodName}"
    ;;
  requeuefailedevents)
    dbPodName=${1:-event-db}
    requeueFailedEvents "${dbPodName}"
    ;;
  requeuefailedcorps)
    dbPodName=${1:-event-db}
    requeueFailedCorps "${dbPodName}"
    ;;
  requeueprocessedcreds)
    dbPodName=${1:-event-db}
    requeueProcessedCreds "${dbPodName}"
    ;;
  getpipelinestatus)
    eventProcessorPodName=${1:-event-processor}
    getPipelineStatus "${eventProcessorPodName}"
    ;;
  getrunningprocesses)
    getRunningProcesses ${@}
    ;;
  getdbdiskusage)
    dbPodName=${1}
    getPostgreSqlDatabaseDiskUsage ${dbPodName}
    ;;
  getcredentialpostrate)
    periodInSeconds=${1}
    dbPodName=${2:-event-db}
    eventProcessorPodName=${3:-event-processor}
    getCredentialPostRate "${periodInSeconds}" "${dbPodName}" "${eventProcessorPodName}"
    ;;

  scaleup)
    scaleUp ${@}
    ;;
  scaledown)
    scaleDown ${@}
    ;;
  recycle)
    recyclePods ${@}
    ;;
  *)
    echoWarning "Unrecognized command; ${_cmd}"
    globalUsage
    ;;
esac

popd >/dev/null